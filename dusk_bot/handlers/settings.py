from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, Message, CallbackQuery, \
    KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

import data.user_data as db


router = Router()

def settings_menu_message(user_id):
    language = db.get_user_language(user_id)
    if language == "en":
        return (f"Select an option:")
    else:
        return (f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")


def create_settings_menu_keyboard(user_id):
    language = db.get_user_language(user_id)
    kb_builder = ReplyKeyboardBuilder()
    if language == "en":
        kb_builder.add(KeyboardButton(text="Language üåç"))
        kb_builder.add(KeyboardButton(text="Support üîß"))
        kb_builder.add(KeyboardButton(text="¬´ Back"))
    else:
        kb_builder.add(KeyboardButton(text="–Ø–∑—ã–∫ üåç"))
        kb_builder.add(KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üîß"))
        kb_builder.add(KeyboardButton(text="¬´ –ù–∞–∑–∞–¥"))
    kb_builder.adjust(1)
    return kb_builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


@router.message(F.text.regexp(r"(?i)–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
@router.message(F.text.regexp(r"(?i)settings"))
async def settings_menu(message: Message):
    user_id = message.from_user.id
    text = settings_menu_message(user_id)
    await message.answer(text, reply_markup=create_settings_menu_keyboard(user_id))


def create_language_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="English üá∫üá∏", callback_data="set_lang:en")
    builder.button(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="set_lang:ru")
    builder.adjust(1)
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def create_language_keyboard2():
    languages = [
        ("English", "en"),
        ("–†—É—Å—Å–∫–∏–π", "ru"),
    ]
    buttons = [[InlineKeyboardButton(text=label, callback_data=f"set_lang:{code}") for label, code in languages]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@router.message(F.text.regexp(r"(?i)language"))
@router.message(F.text.regexp(r"(?i)—è–∑—ã–∫"))
async def set_language_command(message: Message):
    user_id = message.from_user.id
    language = db.get_user_language(user_id)
    if language == "en":
        await message.answer("Please select a language:", reply_markup=create_language_keyboard())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=create_language_keyboard())



@router.callback_query(F.data.startswith("set_lang"))
async def process_language_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    language_code = callback.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    db.set_user_language(user_id, language_code)
    language = db.get_user_language(user_id)

    if language == "en":
        await callback.message.answer(
            f"Your language has been changed to ({language_code}) üá∫üá∏.",
            reply_markup=create_settings_menu_keyboard(user_id)
        )
        await callback.message.delete()
    else:
        await callback.message.answer(
            f"–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ({language_code}).",
            reply_markup=create_settings_menu_keyboard(user_id)
        )
        await callback.message.delete()


def support_menu_message(user_id):
    language = db.get_user_language(user_id)
    if language == "en":
        return (
            f"<b>Support üîß</b>"
            f"\n\n"
            f"Our specialists are ready to answer any of your questions and help resolve any issues. Please contact us through the bot @DuskAirdropSupport, and we will get back to you as soon as possible!"
            f"\n\n"
            f"Support for the bot is available from 6:00 AM to 11:00 PM UTC."
            f"\n\n"
            f"üôèüèª Please keep this in mind when reaching out."
        )
    else:
        return (
            f"<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üîß</b>"
            f"\n\n"
            f"–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–æ–±–ª–µ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @DuskAirdropSupport, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
            f"\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 6:00 –¥–æ 23:00 –ø–æ UTC."
            f"\n\n"
            f"üôèüèª –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏."
        )

@router.message(F.text.regexp(r"(?i)–ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
@router.message(F.text.regexp(r"(?i)support"))
async def support_menu(message: Message):
    user_id = message.from_user.id
    text = support_menu_message(user_id)
    await message.answer(text, reply_markup=create_settings_menu_keyboard(user_id))