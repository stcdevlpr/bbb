import random
from datetime import timedelta, datetime

from aiogram import F, Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

import data.user_data as db

EMOJIS = ["üíé", "üåÄ", "üåÄ"]
ENERGY_COST = 10
users_data = {}

router = Router()


@router.message(F.text.regexp(r"(?i)mining|–º–∞–π–Ω–∏–Ω–≥"))
async def start_game(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {"coins": 0, "energy": 100}

    language = db.get_user_language(user_id)
    if language == "en":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="How does it work?", callback_data="how_it_works")],
            [InlineKeyboardButton(text="Start mining ‚õè", callback_data="start_mining")]
        ])
        message_text = "Choose an action:"
        await message.answer(message_text, reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="how_it_works")],
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥ ‚õè", callback_data="start_mining")]
        ])
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await message.answer(message_text, reply_markup=keyboard)

def generate_keyboard():
    correct_index = random.randint(0, 2)
    builder = InlineKeyboardBuilder()
    for i in range(3):
        if i == correct_index:
            emoji = "üíé"
        else:
            emoji = random.choice([e for e in EMOJIS if e != "üíé"])
        builder.button(text=emoji, callback_data=f"pick:{i}:{correct_index}")
    builder.adjust(3)
    return builder.as_markup()


@router.callback_query(F.data.startswith("pick"))
async def handle_pick(query: types.CallbackQuery):
    user_id = query.from_user.id
    choice, correct_index = map(int, query.data.split(":")[1:])

    if user_id not in users_data:
        users_data[user_id] = {"coins": 0, "energy": 100}

    language = db.get_user_language(user_id)

    if choice == correct_index:
        if users_data[user_id]["energy"] >= ENERGY_COST:
            users_data[user_id]["coins"] += 0.50
            users_data[user_id]["energy"] -= ENERGY_COST
            if language == "en":
                message_text = f"<b>Congratulations!</b> You found a üíé and earned 0.50 coins. Total coins: {users_data[user_id]['coins']}. Energy: {users_data[user_id]['energy']}"
                await db.update_user_balance(user_id,  f"+0.50")
            else:
                message_text = f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –¢—ã –Ω–∞—à–µ–ª üíé –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª 0.50 –º–æ–Ω–µ—Ç. –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {users_data[user_id]['coins']}. –≠–Ω–µ—Ä–≥–∏—è: {users_data[user_id]['energy']}"
                await db.update_user_balance(user_id, f"+0.50")
            await query.message.edit_text(message_text)
        else:
            if language == "en":
                message_text = "Not enough energy to mine. Wait or buy more energy."
            else:
                message_text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥–æ–±—ã—á–∏. –ü–æ–¥–æ–∂–¥–∏ –∏–ª–∏ –∫—É–ø–∏ –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏."
            await query.message.edit_text(message_text)
    else:
        if language == "en":
            message_text = "You didn't find a üíé. Try again."
        else:
            message_text = "–¢—ã –Ω–µ –Ω–∞—à–µ–ª üíé. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        await query.message.edit_text(message_text)


@router.callback_query(F.data == "how_it_works")
async def show_how_it_works(query: types.CallbackQuery):
    user_id = query.from_user.id
    language = db.get_user_language(user_id)
    if language == "en":
        message_text = "In this game, you need to choose the correct emoji to mine a üíé. Among the three emojis, only one is a üíé. If you choose the üíé, you will get an increase in your coin balance. Good luck!"
    else:
        message_text = "–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –¥–æ–±—ã—Ç—å üíé. –°—Ä–µ–¥–∏ —Ç—Ä–µ—Ö —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω ‚Äî —ç—Ç–æ üíé. –ï—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ üíé, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–±–∞–≤–∫—É –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É –º–æ–Ω–µ—Ç. –£–¥–∞—á–∏!"
    await query.message.edit_text(message_text)


last_mining = {}

@router.callback_query(F.data == "start_mining")
async def start_mining(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    current_time = datetime.now()
    if user_id in last_mining:
        last_time = last_mining[user_id]
        if current_time - last_time < timedelta(minutes=30):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
            user_language = db.get_user_language(user_id)
            if user_language == "en":
                await callback.answer("Mining dask is available every half an hour, check back later!",
                                      show_alert=True)
            else:
                await callback.answer(
                    "–î–æ–±—ã—á–∞ –¥–∞—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!",
                    show_alert=True)
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    last_mining[user_id] = current_time

    if user_id not in users_data:
        users_data[user_id] = {"coins": 0, "energy": 100}

    language = db.get_user_language(user_id)
    if language == "en":
        message_text = "Choose the correct emoji to mine a üíé:"
    else:
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –¥–æ–±—ã—Ç—å üíé:"

    await callback.message.edit_text(message_text, reply_markup=generate_keyboard())
